## Simulation isolation et segmentation r√©seau

Vagrant.configure("2") do |config|
  BASE_BOX = "bento/ubuntu-20.04"

  # ======== FIREWALL / GATEWAY ==========
  config.vm.define "fw" do |fw|
    fw.vm.box = BASE_BOX
    fw.vm.hostname = "fw"

    fw.vm.network "private_network", ip: "10.0.0.1", virtualbox__intnet: "dmz_net"
    fw.vm.network "private_network", ip: "10.0.1.1", virtualbox__intnet: "int_net"
    fw.vm.network "private_network", ip: "10.0.2.1", virtualbox__intnet: "mgmt_net"

    fw.vm.provider "virtualbox" do |vb|
      vb.name = "fw"
      vb.customize ["modifyvm", :id, "--memory", "1024"]
      vb.customize ["modifyvm", :id, "--cpus", "1"]
    end

    fw.vm.provision "shell", inline: <<-SHELL
      apt-get update -y
      DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent snort -y

      echo 1 > /proc/sys/net/ipv4/ip_forward
      sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
      sysctl -p

      # Configure netplan for interfaces
      cat > /etc/netplan/01-netcfg.yaml <<EOF
network:
  version: 2
  ethernets:
    eth0:
      dhcp4: true
    eth1:
      addresses:
        - 10.0.0.1/24
    eth2:
      addresses:
        - 10.0.1.1/24
    eth3:
      addresses:
        - 10.0.2.1/24
EOF
      netplan apply

      iptables -F
      iptables -t nat -F
      iptables -X

      iptables -P INPUT DROP
      iptables -P FORWARD DROP
      iptables -P OUTPUT ACCEPT

      iptables -A INPUT -i lo -j ACCEPT
      iptables -A INPUT -p tcp -s 10.0.2.0/24 --dport 22 -j ACCEPT

      iptables -A FORWARD -s 10.0.0.10 -d 10.0.1.20 -p tcp --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT
      iptables -A FORWARD -s 10.0.1.20 -d 10.0.0.10 -p tcp --sport 3306 -m state --state ESTABLISHED -j ACCEPT

      iptables -A FORWARD -s 10.0.2.0/24 -d 10.0.0.0/16 -m state --state NEW,ESTABLISHED -j ACCEPT
      iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT


      # NAT for internet access
      iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

      iptables -N LOGDROP
      iptables -A LOGDROP -j LOG --log-prefix "FW_DROP: " --log-level 4
      iptables -A LOGDROP -j DROP
      iptables -A FORWARD -j LOGDROP

      # Debugging: Log accepted traffic
      iptables -A FORWARD -s 10.0.0.10 -d 10.0.1.20 -j LOG --log-prefix "WEB_TO_DB: "
      iptables -A FORWARD -s 10.0.1.20 -d 10.0.0.10 -j LOG --log-prefix "DB_TO_WEB: "

      netfilter-persistent save

      if [ -f /etc/snort/snort.conf ]; then
        sed -i '/^var HOME_NET/ s/=.*/= 10.0.0.0\/8/' /etc/snort/snort.conf || echo "var HOME_NET 10.0.0.0/8" >> /etc/snort/snort.conf
        systemctl enable snort || true
        systemctl restart snort || true
      fi
    SHELL
  end

  # ======== WEB SERVER (DMZ) ==========
  config.vm.define "web" do |web|
    web.vm.box = BASE_BOX
    web.vm.hostname = "web"
    web.vm.network "private_network", ip: "10.0.0.10", virtualbox__intnet: "dmz_net"

    # --- Forward guest port 80 to host port 8080 so host can access the DMZ web ---
    web.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true, id: "web-http"

    web.vm.provider "virtualbox" do |vb|
      vb.name = "web"
      vb.customize ["modifyvm", :id, "--memory", "512"]
    end

    web.vm.provision "shell", inline: <<-SHELL
      apt-get update -y
      apt-get install -y docker.io ufw mysql-client -y
      systemctl enable docker
      systemctl start docker
      ufw --force reset
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow 80/tcp
      ufw allow from 10.0.1.0/24 to any port 3306
      ufw enable

      netplan apply
      docker run -d --name demo-nginx -p 80:80 nginx
    SHELL
  end

  # ======== DATABASE SERVER (INTERNAL) ==========
  config.vm.define "db" do |db|
    db.vm.box = BASE_BOX
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "10.0.1.20", virtualbox__intnet: "int_net"

    db.vm.provider "virtualbox" do |vb|
      vb.name = "db"
      vb.customize ["modifyvm", :id, "--memory", "512"]
    end

    db.vm.provision "shell", inline: <<-SHELL
      apt-get update -y
      apt-get install -y mysql-server ufw -y
      systemctl enable mysql
      sed -i 's/bind-address.*=.*127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf
      systemctl restart mysql
      ufw --force reset
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow from 10.0.0.10 to any port 3306
      ufw allow from 10.0.2.0/24 to any port 22
      ufw enable
      echo "CREATE DATABASE IF NOT EXISTS labdb;" | mysql -u root || true

      # Configure netplan for persistent routing
      cat > /etc/netplan/01-netcfg.yaml <<EOF
network:
  version: 2
  ethernets:
    eth0:
      addresses:
        - 10.0.1.20/24
      gateway4: 10.0.1.1
EOF
      netplan apply
    SHELL
  end

  # ======== ADMIN WORKSTATION (MGMT) ==========
  config.vm.define "admin" do |admin|
    admin.vm.box = BASE_BOX
    admin.vm.hostname = "admin"
    admin.vm.network "private_network", ip: "10.0.2.100", virtualbox__intnet: "mgmt_net"

    admin.vm.provider "virtualbox" do |vb|
      vb.name = "admin"
      vb.customize ["modifyvm", :id, "--memory", "512"]
    end

    admin.vm.provision "shell", inline: <<-SHELL
      apt-get update -y
      apt-get install -y nmap curl net-tools sshpass -y
      # Configure netplan for persistent routing
      cat > /etc/netplan/01-netcfg.yaml <<EOF
network:
  version: 2
  ethernets:
    eth0:
      addresses:
        - 10.0.2.100/24
      gateway4: 10.0.2.1
EOF
      netplan apply
      echo "Admin tools installed"
    SHELL
  end

  # ======== ATTACKER (DMZ-only, same base box) ==========
  config.vm.define "attacker" do |atk|
    atk.vm.box = BASE_BOX
    atk.vm.hostname = "attacker"
    atk.vm.network "private_network", ip: "10.0.0.50", virtualbox__intnet: "dmz_net"

    atk.vm.provider "virtualbox" do |vb|
      vb.name = "attacker_dmz"
      vb.customize ["modifyvm", :id, "--memory", "512"]
      vb.customize ["modifyvm", :id, "--cpus", "1"]
    end

    atk.vm.provision "shell", inline: <<-SHELL
      apt-get update -y
      DEBIAN_FRONTEND=noninteractive apt-get install -y \
        nmap dnsutils net-tools curl wget git \
        nikto gobuster sqlmap netcat-openbsd \
        hashcat htop || true

      mkdir -p /home/vagrant/tools
      chown -R vagrant:vagrant /home/vagrant/tools
      echo "Attacker box provisioned with enumeration tools."
    SHELL
  end

end
